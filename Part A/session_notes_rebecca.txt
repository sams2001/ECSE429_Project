CHARTER: Identify capabilities and areas of potential instability of the “rest api todo list manager”. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TOOLS: Postman

~~~~~~~~~~~~~~~~~~~~~~~~~~~~

PREPARATION: cURL syntax refresh, Postman refresh

~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TESTER: Rebecca Mizrahi (260975001)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~

DEPLOYED WITH: java -jar runTodoManagerRestAPI-1.5.5.jar

~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Start time: 10:00 PM


Test: GET all todos
curl -v http://localhost:4567/todos

* Connected to localhost (::1) port 4567 (#0)
> GET /todos HTTP/1.1
> Host: localhost:4567
> User-Agent: curl/7.77.0
> Accept: */*
> 
< HTTP/1.1 200 OK
< Date: Wed, 08 Feb 2023 03:06:34 GMT
< Content-Type: application/json
{"todos":[{"id":"2","title":"file paperwork","doneStatus":"false","description":"","tasksof":[{"id":"1"}]},{"id":"1","title":"scan paperwork","doneStatus":"false","description":"","tasksof":[{"id":"1"}],"categories":[{"id":"1"}]}]}


*Todo*

Test: GET todos by existing ids

curl -v http://localhost:4567/todos/1

> GET /todos/1 HTTP/1.1
< HTTP/1.1 200 OK
< Date: Wed, 08 Feb 2023 03:09:27 GMT
{"todos":[{"id":"1","title":"scan paperwork","doneStatus":"false","description":"","tasksof":[{"id":"1"}],"categories":[{"id":"1"}]}]}


curl -v http://locddalhost:4567/todos/2
	Similar output.


Test: todos with non-existing ids

curl -v http://localhost:4567/todos/3

> GET /todos/3 HTTP/1.1
< HTTP/1.1 404 Not Found
{"errorMessages":["Could not find an instance with todos/3"]}%

 
Test: todos head

curl -v -I http://localhost:4567/todos

> HEAD /todos HTTP/1.1
< HTTP/1.1 200 OK

	No response.
	Switching to Postman.


Test: POST new todo with id 3
{
  "id": "3",
  "title": "remove paperwork",
  "doneStatus": false,
  "description": "",
  "tasksof": [
    {
      "id": "1"
    }
  ],
  "categories": [
    {
      "id": "1"
    }
  ]
}

< 400 Bad Request
< Error Message: "Invalid Creation: Failed Validation: Not allowed to create with id"

	Adjusted input by removing id JSON field.

< 201 Created
{
    "id": "22",
    "title": "file paperwork",
    "doneStatus": "false",
    "description": "",
    "tasksof": [
        {
            "id": "1"
        }
    ],
    "categories": [
        {
            "id": "1"
        }
    ]
}

	Creates new todo with id 22. Should have id 2.
	Repeating this test results in a new todo with id 23. 
	If 22 and 23 are deleted, the next todo has id 24, leaving todos with ids 1 and 24.  
	
Test: POST todo with id 2 new title

POST http://localhost:4567/todos/2 
{
    "id": 2,
    "title": "new title",
    "doneStatus": false,
    "description": "",
    "tasksof": [
        {
            "id": "1"
        }
    ]
}


Test: PUT todo with id 2 new title

< 200 OK
Title changed.


Test: PUT new id on todo

PUT http://localhost:4567/todos/2
{
    "id": 3,
    "title": "file paperwork",
    "doneStatus": false,
    "description": "",
    "tasksof": [
        {
            "id": "1"
        }
    ]
}

< 200 OK
No change in todo, id remains 2.

Test: delete

DELETE http://localhost:4567/todos/2

< 200 OK
Works as expected.


*Project*

Test: get all project instances

GET http://localhost:4567/projects
< 200 OK
	Returns single instance as expected


Test: get project instance by id

GET http://localhost:4567/projects/1
< 200 OK
        Returns single instance as expected


Test: get project instance by id that dne

http://localhost:4567/projects/2
< 404 Not Found
	Doesn't return anything.


Test: make a new project with one of the two todo tasks

POST http://localhost:4567/projects
{
  "title": "Office Work",
  "completed": false,
  "active": false,
  "description": "",
  "tasks": [
    {
      "id": "1"
    }
  ]
}

< 201 Created
	Appears on application as expected
	ID assigned is 3, even though there is no project with id 2 in /projects


Test: change completed status from false to true with POST

POST http://localhost:4567/projects/3 with {"completed": true}
< 200 OK


Test: change active status from false to true with PUT

PUT http://localhost:4567/projects/3 with {"active": true}
< 200 OK

{
    "id": "3",
    "title": "",
    "completed": false,
    "active": true,
    "description": ""
}
	Deleted all assumedly required information. Must be updated with full JSON

PUT http://localhost:4567/projects/3
{
  "title": "Office Work",
  "completed": false,
  "active": true,
  "description": "",
  "tasks": [
    {
      "id": "1"
    }
  ]
}

	Worked as intended, only active field is changed to true.


Test: delete instance of project.

DELETE http://localhost:4567/projects/3
< 200 OK


Test: delete instance of project by id that dne

DELETE http://localhost:4567/projects/3
< 404 Not Found


*Category*


Test: query for all category instances

GET http://localhost:4567/categories
< 200 OK
	Returned the two instances as expected


Test: add a new category

< 201 Created
	New category is created with id 3.


Test: delete a category

< 200 OK
	Two instances in application remain.


*Relations*

Test: Given a project with two todos, delete one.

DELETE http://localhost:4567/todos/24
< 200 OK

GET http://localhost:4567/projects/1
	Projects todos no longer include the todo with id 24 as expected.


Test: delete a category that a todo is associated to.
BUG IDENTIFIED

DELETE http://localhost:4567/categories/1
< 200 OK

GET http://localhost:4567/todos/1
< 200 OK 
{
  "id": "1",
  "title": "scan paperwork",
  "doneStatus": "false",
  "description": "",
  "categories": [
    {
      "id": "1"
    }
  ]
}
	Returns todo with categories including category 1, which was just deleted.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Application closed at around 10:55 PM. Extra time for writing and cleaning session notes.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~


SUMMARY:
	Simple get, post, put, delete functions work as expected or basically as expected for todos, categories and projects.
	Relationship of projects to todos logical
	Relationship of todos to categories illogical 


FUTURE TESTING:
	Explore more about relationship between instances and fields.
